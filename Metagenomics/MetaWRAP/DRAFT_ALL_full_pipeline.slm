
#********************* run in gpu
#!/bin/bash
#SBATCH -J metawrap.batch
#SBATCH -e err.metawrap.batch
#SBATCH -o out.metawrap.batch
#SBATCH -p gpu
#SBATCH -n 1
#SBATCH -t 2-00:00

# directory raw_data --> /scratch/mblanco/baro/metagenomic/data/raw_data/F112_D21
# /scratch/mblanco/baro/metagenomic/data/raw_data/F112_D21/F112_D21.R1.fastq.gz
# /scratch/mblanco/baro/metagenomic/data/raw_data/F112_D21/F112_D21.R2.fastq.gz

# bowtie2 index Sscrofa: /scratch/mblanco/baro/metagenomic/analysis/1_kneaddata/Sscrofa_db/Sscrofa_indexed_11_1
/scratch/mblanco/baro/metagenomic/analysis/1_kneaddata/GCF_000003025.6_Sscrofa11.1_genomic.fna

# bmtagger for Sscrofa
bmtool -d /scratch/mblanco/baro/metagenomic/analysis/1_kneaddata/GCF_000003025.6_Sscrofa11.1_genomic.fna
 -o Sscrofa.bitmask # MOVE IT TO /home/mblanco/BMTAGGER_DB
# srprism 
srprism mkindex -i /scratch/mblanco/baro/metagenomic/analysis/1_kneaddata/GCF_000003025.6_Sscrofa11.1_genomic.fna -o /home/mblanco/BMTAGGER_DB/Sscrofa.srprism

# (2h)  Run metaWRAP-Read_qc to trim the reads and remove human and Sus Scrofa contamination
# metawrap read_qc -1 /scratch/mblanco/baro/metagenomic/data/raw_data/F112D21/F112_D21.R1.fastq.gz \
# -2 /scratch/mblanco/baro/metagenomic/data/raw_data/F112_D21/F112_D21.R2.fastq.gz -x Sscrofa -o READ_QC/F112_D21
#*******************
#BORRAR __ de las raw_reads
metawrap read_qc -1 /scratch/mblanco/baro/metagenomic/data/raw_data/F112_D21/F112D21_1.fastq.gz -2 /scratch/mblanco/baro/metagenomic/data/raw_data/F112_D21/F112D21_2.fastq.gz -x Sscrofa -o READ_QC/F112D21look
#******************* OK


# Move over the final QC'ed reads into a new folder
mkdir CLEAN_READS
cat READ_QC/F112D21/final_pure_reads_1.fastq CLEAN_READS/ALL_READS.fastq
cat READ_QC/F112D21/final_pure_reads_2.fastq CLEAN_READS/ALL_READS.fastq

# Step 2: (5m) Assembling the metagenomes with the metaWRAP-Assembly module
# Assemble the reads with metaSPAdes
metawrap assembly -1 CLEAN_READS/F112D21_1.fastq -2 CLEAN_READS/F112D21_2.fastq -m 200 -t 96 --metaspades -o ASSEMBLY # assemble with metaspades instead of megahit (better results but slower and higher memory requirement)

# ***********************
# RUN KRAKEN (WITH THE OTHER CONDA ENV) on both reads and the assembly 
# > CLEAN_READS/F112_D21_*.fastq ASSEMBLY/final_assembly.fasta
# ***********************

# Step 4: (5m) Bin the co-assembly with three different algorithms with the Binning module
# Run the binning module with all three binners --> --metabat2 --maxbin2 --concoct
metawrap binning -o INITIAL_BINNING -t 96 -a ASSEMBLY/final_assembly.fasta --metabat2 CLEAN_READS/F112D21_*.fastq

# Step 5: (10m) Consolidate bin sets with the Bin_refinement module
# Run metaWRAP's Bin_refinement module
metawrap bin_refinement -o BIN_REFINEMENT -t 96 -A INITIAL_BINNING/metabat2_bins/ -B INITIAL_BINNING/maxbin2_bins/ -C INITIAL_BINNING/concoct_bins/ -c 50 -x 10

# Step 7: Find the abundances of the draft genomes (bins) across the samples
# Run the Quant_bin module
metawrap quant_bins -b BIN_REFINEMENT/binsA -o QUANT_BINS -a ASSEMBLY/final_assembly.fasta CLEAN_READS/F112D21_*.fastq

# Step 9: Determine the taxonomy of each bin with the Classify_bins module
# Run the Classify_bins module
metawrap classify_bins -b BIN_REFINEMENT/binsA -o BIN_CLASSIFICATION -t 48

# ************************
# RUN PROKKA WITH REASSEMBLED BINS
# Step 10: Functionally annotate bins with the Annotate_bins module
# Run the Annotate_bins module
metawrap annotate_bins -o FUNCT_ANNOT -t 96 -b BIN_REFINEMENT/binsA

